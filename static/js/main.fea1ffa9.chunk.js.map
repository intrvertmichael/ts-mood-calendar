{"version":3,"sources":["redux/actions/firebaseActions.tsx","redux/actions/currentActions.tsx","components/Header.tsx","components/SingleDay.tsx","components/Days.tsx","components/Calendar.tsx","redux/actions/calendarActions.tsx","components/CalendarCreation.ts","components/LogInPage.tsx","components/Modal.tsx","App.tsx","serviceWorker.ts","redux/reducers/calendarReducer.tsx","redux/reducers/currentReducer.tsx","redux/reducers/index.tsx","redux/index.tsx","index.tsx"],"names":["syncFirebase","dispatch","getState","firestoreCalendar","getFirestore","firebaseAuth","firebase","auth","uid","reduxCalendar","calendar","firestore","data","userCalendars","stored","_","isEqual","type","current","timesFirestoreLoaded","day","collection","doc","update","lastUpdateAt","Date","then","console","log","catch","month","updateCurrentMonth","connect","state","year2020","allMonths","year","LogOut","getFirebase","signOut","monthNum","props","allMonthsArray","Object","entries","allMonthsJSX","map","m","num","push","key","onClick","singleMonthClicked","name","className","length","menu","document","querySelector","classList","toggle","monthsClicked","labeledDays","days","starts","updateCurrentDay","dayNum","updateCurrenDay","moodNum","keys","labeledDay","calendarDay","pos","mood","classes","date","currentDay","getDate","currentMonth","getMonth","daysArray","calendarSize","calendarLength","i","addMonth","monthName","useFirestoreConnect","useEffect","todaysMonthNum","modalOpen","loggedIn","LogIn","login","provider","makeMoodMessage","cal","resetCurrent","addMood","currentMonthNum","dayName","addMessage","message","deleteDay","storedMoodMessage","storedMood","storedMessage","circleClicked","monthOBj","response","prompt","messageClicked","Boolean","window","location","hostname","match","initialState","calendarReducer","action","mergeDeep","newState","cloneDeep","unset","currentReducer","setIn","merge","combineReducers","firestoreReducer","firebaseReducer","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","withExtraArgument","reduxFirestore","rrfProps","config","createFirestoreInstance","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.fea1ffa9.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\nimport { GetStateDetails } from '../../components/_reducer_types';\nimport _ from 'lodash';\n// import { mergeDeep } from 'immutable';\n\nexport const LogIn: any = () => {\n\treturn (\n\t\tdispatch: Dispatch,\n\t\tgetState: GetStateDetails,\n\t\t{ getFirebase }: any\n\t) => {\n\t\tconst firebase = getFirebase();\n\t\tfirebase\n\t\t\t.login({ provider: 'google', type: 'popup' })\n\t\t\t.then(() => console.log('Logged in...'))\n\t\t\t.catch(() => console.log('Log in failed'));\n\t};\n};\n\nexport const LogOut: any = () => {\n\treturn (\n\t\tdispatch: Dispatch,\n\t\tgetState: GetStateDetails,\n\t\t{ getFirebase }: any\n\t) => {\n\t\tconst firebase = getFirebase();\n\t\tfirebase\n\t\t\t.auth()\n\t\t\t.signOut()\n\t\t\t.then(() => {\n\t\t\t\tconsole.log('Signed Out...');\n\t\t\t\tdispatch({ type: 'LOG_OUT' });\n\t\t\t\tdispatch({ type: 'RESET_APP' });\n\t\t\t});\n\t};\n};\n\nexport const syncFirebase: any = () => {\n\treturn (\n\t\tdispatch: Dispatch,\n\t\tgetState: GetStateDetails,\n\t\t{ getFirestore }: any\n\t) => {\n\t\tconst firebaseAuth: string = getState().firebase.auth.uid;\n\t\tconst reduxCalendar = getState().calendar;\n\n\t\tlet firestoreCalendar;\n\t\tif (getState().firestore.data.userCalendars[firebaseAuth]) {\n\t\t\tfirestoreCalendar = getState().firestore.data.userCalendars[firebaseAuth]\n\t\t\t\t.stored;\n\t\t} else {\n\t\t\tfirestoreCalendar = {};\n\t\t}\n\t\tconst calendarsEqual = _.isEqual(reduxCalendar, firestoreCalendar);\n\n\t\tif (!calendarsEqual) {\n\t\t\tdispatch({ type: 'FIREBASE_LOADED' });\n\t\t\tconst firestore = getFirestore();\n\n\t\t\tif (\n\t\t\t\tgetState().current.timesFirestoreLoaded <= 1 &&\n\t\t\t\tgetState().current.day === null\n\t\t\t) {\n\t\t\t\tdispatch({ type: 'SYNC_WITH_FIREBASE', calendar: firestoreCalendar });\n\t\t\t} else {\n\t\t\t\tfirestore\n\t\t\t\t\t.collection('userCalendars')\n\t\t\t\t\t.doc(firebaseAuth)\n\t\t\t\t\t.update({\n\t\t\t\t\t\tstored: reduxCalendar,\n\t\t\t\t\t\tlastUpdateAt: new Date(),\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => console.log(true, 'updated Firestore'))\n\t\t\t\t\t.catch(() => console.log('Not able to updated Firestore'));\n\t\t\t}\n\t\t\tdispatch({\n\t\t\t\ttype: 'UPDATE_CURRENT_MONTH',\n\t\t\t\tmonth: getState().current.month,\n\t\t\t});\n\t\t} else {\n\t\t}\n\t};\n};\n","import { Dispatch } from 'redux';\nimport { GetStateDetails } from '../../components/_reducer_types';\n\nexport const triggerModal: any = () => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) =>\n\t\tdispatch({ type: 'UPDATE_MODAL' });\n};\n\nexport const resetCurrent: any = () => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) =>\n\t\tdispatch({ type: 'RESET_CURRENT' });\n};\n\nexport const updateCurrentYear: any = (yearNum: number) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) =>\n\t\tdispatch({ type: 'UPDATE_CURRENT_YEAR', year: yearNum });\n};\n\nexport const updateCurrentMonth: any = (month: number) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) =>\n\t\tdispatch({ type: 'UPDATE_CURRENT_MONTH', month: month });\n};\n\nexport const updateCurrenDay: any = (dayNum: number) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) => {\n\t\tdispatch({ type: 'UPDATE_MODAL' });\n\t\tdispatch({ type: 'UPDATE_CURRENT_DAY', day: dayNum });\n\t};\n};\n","import React from 'react';\nimport '../syles/Header.css';\n\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppStateDetails } from './_reducer_types';\nimport { YearDetails, MonthDetails } from './_calendar_types';\nimport { LogOut } from '../redux/actions/firebaseActions';\nimport { updateCurrentMonth } from '../redux/actions/currentActions';\n\ninterface HeaderProps {\n\tmonth: MonthDetails;\n\tallMonths: YearDetails;\n\tyear: number;\n\tLogOut: () => void;\n\tupdateCurrentMonth: (monthNum: number) => void;\n}\n\nconst Header = (props: HeaderProps) => {\n\tconst allMonthsArray = Object.entries(props.allMonths);\n\tlet allMonthsJSX: JSX.Element[] = [];\n\t// eslint-disable-next-line array-callback-return\n\tallMonthsArray.map((m: [string, MonthDetails]) => {\n\t\tif (m[1].num !== props.month.num) {\n\t\t\tallMonthsJSX.push(\n\t\t\t\t<li key={m[1].num + 10} onClick={() => singleMonthClicked(m[1].num)}>\n\t\t\t\t\t{m[1].name}\n\t\t\t\t</li>\n\t\t\t);\n\t\t}\n\t});\n\n\tconst monthsClicked = () => {\n\t\tconst menu = document.querySelector('.all-months');\n\t\tmenu?.classList.toggle('grow');\n\t};\n\n\tconst singleMonthClicked = (monthNum: number) => {\n\t\tprops.updateCurrentMonth(monthNum);\n\t};\n\n\treturn (\n\t\t<div className='header'>\n\t\t\t{allMonthsJSX.length > 0 ? (\n\t\t\t\t<div className='clickable-title' onClick={() => monthsClicked()}>\n\t\t\t\t\t{props.month.name} | {props.year}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className='title'>\n\t\t\t\t\t{props.month ? props.month.name : ''} | {props.year}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<button onClick={() => props.LogOut()}>Log Out</button>\n\t\t\t<div className={'all-months'}>{allMonthsJSX}</div>\n\t\t\t<div className='day-labels'>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>S</li>\n\t\t\t\t\t<li>M</li>\n\t\t\t\t\t<li>T</li>\n\t\t\t\t\t<li>W</li>\n\t\t\t\t\t<li>Th</li>\n\t\t\t\t\t<li>F</li>\n\t\t\t\t\t<li>S</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\tconst month = state.current.month;\n\treturn {\n\t\tmonth: state.calendar.year2020[`month${month}`],\n\t\tallMonths: state.calendar.year2020,\n\t\tyear: state.current.year,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {\n\t\tLogOut: () => dispatch(LogOut()),\n\t\tupdateCurrentMonth: (monthNum: number) =>\n\t\t\tdispatch(updateCurrentMonth(monthNum)),\n\t};\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport '../syles/SingleDay.css';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { updateCurrenDay } from '../redux/actions/currentActions';\nimport { AppStateDetails } from './_reducer_types';\nimport { DayDetails, MonthDetails } from './_calendar_types';\n\ninterface SingleDayProps {\n\tpos: number;\n\tstarts: number;\n\tmonth: MonthDetails;\n\tlabeledDays: DayDetails;\n\tupdateCurrentDay: (dayNum: number) => void;\n}\n\nconst SingleDay = (props: SingleDayProps) => {\n\t// find if i has a mood or message\n\tlet moodNum: number = 0;\n\tif (props.labeledDays) {\n\t\tconst labeledDaysArray = Object.keys(props.labeledDays);\n\t\t// eslint-disable-next-line array-callback-return\n\t\tlabeledDaysArray.map((labeledDay) => {\n\t\t\tconst calendarDay = props.pos;\n\t\t\tif (`day${calendarDay}` === labeledDay) {\n\t\t\t\tmoodNum = props.labeledDays[labeledDay].mood;\n\t\t\t}\n\t\t});\n\t}\n\tconst mood = moodNum;\n\t// const mood = props.mood;\n\n\tlet classes = 'single-day ';\n\tconst date = new Date();\n\tconst currentDay = date.getDate();\n\tconst currentMonth = date.getMonth();\n\n\tif (props.pos && props.starts) {\n\t\tif (currentMonth === props.month.num && currentDay === props.pos) {\n\t\t\tclasses += 'currentDay ';\n\t\t}\n\t\tif (mood !== null) {\n\t\t\tclasses += `mood${mood}`;\n\t\t}\n\t}\n\n\tconst dayClicked = () => {\n\t\tprops.updateCurrentDay(props.pos);\n\t};\n\n\treturn (\n\t\t<div className={classes} onClick={() => dayClicked()}>\n\t\t\t{props.pos}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\tconst month = state.current.month;\n\treturn {\n\t\tmonth: state.calendar.year2020[`month${month}`],\n\t\tlabeledDays: state.calendar.year2020[`month${month}`].days,\n\t\tstarts: state.calendar.year2020[`month${month}`].starts,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {\n\t\tupdateCurrentDay: (dayNum: number) => dispatch(updateCurrenDay(dayNum)),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleDay);\n","import React from 'react';\nimport '../syles/Days.css';\nimport { AppStateDetails } from './_reducer_types';\nimport { MonthDetails } from './_calendar_types';\nimport SingleDay from './SingleDay';\nimport { connect } from 'react-redux';\n\ninterface DayProps {\n\tmonth: MonthDetails;\n}\n\nconst Days = (props: DayProps) => {\n\tlet daysArray: JSX.Element[] = [];\n\n\t// figure out calendar size\n\tif (props.month) {\n\t\tconst calendarLength = props.month.starts + props.month.length;\n\t\tlet calendarSize: number;\n\t\tif (calendarLength <= 28) {\n\t\t\tcalendarSize = 28;\n\t\t} else if (calendarLength <= 35) {\n\t\t\tcalendarSize = 35;\n\t\t} else {\n\t\t\tcalendarSize = 42;\n\t\t}\n\n\t\tfor (let i = 0; i < calendarSize; i++) {\n\t\t\tif (\n\t\t\t\ti >= props.month.starts &&\n\t\t\t\ti < props.month.length + props.month.starts\n\t\t\t) {\n\t\t\t\tdaysArray.push(<SingleDay key={i} pos={i - props.month.starts + 1} />);\n\t\t\t} else {\n\t\t\t\tdaysArray.push(<div className='not-day' key={i} />);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn <div className='days'> {daysArray} </div>;\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\tconst month = state.current.month;\n\treturn {\n\t\tmonth: state.calendar.year2020[`month${month}`],\n\t};\n};\n\nexport default connect(mapStateToProps)(Days);\n","import React, { useEffect } from 'react';\nimport '../syles/Calendar.css';\n\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { useFirestoreConnect } from 'react-redux-firebase';\n\nimport Header from './Header';\nimport Days from './Days';\nimport { calendarCreation } from './CalendarCreation';\nimport { MonthDetails } from './_calendar_types';\nimport { AppStateDetails } from './_reducer_types';\n\nimport { updateCurrentMonth } from '../redux/actions/currentActions';\nimport { addMonth } from '../redux/actions/calendarActions';\nimport { syncFirebase } from '../redux/actions/firebaseActions';\n\ninterface CalendarProps {\n\tmonth: number;\n\tyear: number;\n\tuid: string;\n\tuserCalendars: {};\n\taddMonth: (month: MonthDetails) => void;\n\tsyncFirebase: () => void;\n\tupdateCurrentMonth: (monthNum: number) => void;\n}\n\nconst Calendar = (props: CalendarProps) => {\n\tuseFirestoreConnect(`userCalendars`);\n\n\t// When calendar starts show default today's month\n\tconst { addMonth, updateCurrentMonth } = props;\n\tuseEffect(() => {\n\t\tconst todaysMonthNum = new Date().getMonth();\n\t\tconst month: MonthDetails = calendarCreation(todaysMonthNum);\n\t\taddMonth(month);\n\t\tupdateCurrentMonth(month.num);\n\t}, [addMonth, updateCurrentMonth]);\n\n\t// If firestore is loaded sync it.\n\tuseEffect(() => {\n\t\tif (props.userCalendars) {\n\t\t\tif (props.month) {\n\t\t\t\tprops.syncFirebase();\n\t\t\t}\n\t\t} else {\n\t\t}\n\t}, [props]);\n\n\treturn (\n\t\t<div className='calendar'>\n\t\t\t{props.month >= 0 ? <Header /> : ''}\n\t\t\t{props.month >= 0 ? <Days /> : ''}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\t// console.log('-> Calendar is loaded');\n\t// console.log('state', state);\n\n\treturn {\n\t\tyear: state.current.year,\n\t\tmonth: state.current.month,\n\t\tuid: state.firebase.auth.uid,\n\t\tuserCalendars: state.firestore.data.userCalendars,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {\n\t\tupdateCurrentMonth: (monthNum: number) =>\n\t\t\tdispatch(updateCurrentMonth(monthNum)),\n\t\taddMonth: (month: MonthDetails) => dispatch(addMonth(month)),\n\t\tsyncFirebase: () => dispatch(syncFirebase()),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Calendar);\n","import { Dispatch } from 'redux';\nimport { GetStateDetails } from '../../components/_reducer_types';\nimport { MonthDetails } from '../../components/_calendar_types';\n\n// ADD\nexport const addMonth: any = (month: MonthDetails) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) => {\n\t\tdispatch({\n\t\t\ttype: 'CREATE_MONTH',\n\t\t\tmonthName: `month${month.num}`,\n\t\t\tmonth: month,\n\t\t});\n\t};\n};\n\nexport const addMood: any = (moodNum: number) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) => {\n\t\tconst currentMonthNum = getState().current.month;\n\n\t\tdispatch({\n\t\t\ttype: 'CREATE_MOOD',\n\t\t\tmonthName: `month${\n\t\t\t\tgetState().calendar.year2020[`month${currentMonthNum}`].num\n\t\t\t}`,\n\t\t\tdayName: `day${getState().current.day}`,\n\t\t\tmood: moodNum,\n\t\t});\n\t};\n};\n\nexport const addMessage: any = (message: string) => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) => {\n\t\tconst currentMonthNum = getState().current.month;\n\t\tdispatch({\n\t\t\ttype: 'CREATE_MESSAGE',\n\t\t\tmonthName: `month${\n\t\t\t\tgetState().calendar.year2020[`month${currentMonthNum}`].num\n\t\t\t}`,\n\t\t\tdayName: `day${getState().current.day}`,\n\t\t\tmessage: message,\n\t\t});\n\t};\n};\n\n// REMOVE\nexport const deleteDay: any = () => {\n\treturn (dispatch: Dispatch, getState: GetStateDetails) => {\n\t\tconst currentMonthNum = getState().current.month;\n\t\tdispatch({\n\t\t\ttype: 'DELETE_DAY',\n\t\t\tmonthName: `month${\n\t\t\t\tgetState().calendar.year2020[`month${currentMonthNum}`].num\n\t\t\t}`,\n\t\t\tdayName: `day${getState().current.day}`,\n\t\t});\n\t};\n};\n","import { MonthDetails } from './_calendar_types';\n\nexport const calendarCreation = (num: number): MonthDetails => {\n\tconst months2020: MonthDetails[] = [\n\t\t{ num: 0, name: 'January', length: 31, starts: 3, days: {} },\n\t\t{ num: 1, name: 'February', length: 28, starts: 6, days: {} },\n\t\t{ num: 2, name: 'March', length: 31, starts: 0, days: {} },\n\t\t{ num: 3, name: 'April', length: 30, starts: 3, days: {} },\n\t\t{ num: 4, name: 'May', length: 31, starts: 5, days: {} },\n\t\t{ num: 5, name: 'June', length: 30, starts: 1, days: {} },\n\t\t{ num: 6, name: 'July', length: 31, starts: 3, days: {} },\n\t\t{ num: 7, name: 'August', length: 31, starts: 6, days: {} },\n\t\t{ num: 8, name: 'September', length: 30, starts: 2, days: {} },\n\t\t{ num: 9, name: 'October', length: 31, starts: 4, days: {} },\n\t\t{ num: 10, name: 'November', length: 30, starts: 0, days: {} },\n\t\t{ num: 11, name: 'December', length: 31, starts: 2, days: {} },\n\t];\n\n\t// enter firebase check here\n\t// if doesnt exist on firebase then set the defaults to the saved defaults\n\n\treturn months2020[num];\n};\n","import React from 'react';\nimport { LogIn } from '../redux/actions/firebaseActions';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport './../syles/LogInPage.css';\nimport GoogleButton from 'react-google-button';\nimport { AppStateDetails } from './_reducer_types';\n\ninterface LogInPageProps {\n\tcurrent: boolean;\n\tloggedIn: string;\n\tcalendar: AppStateDetails;\n\tLogIn: () => void;\n}\n\nconst LogInPage = (props: LogInPageProps) => {\n\treturn (\n\t\t<div className='login'>\n\t\t\t<div className='login-message'>\n\t\t\t\t<h1>Mood Calendar</h1>\n\t\t\t\t<p>Keep track of your mood and what's going on.</p>\n\t\t\t</div>\n\t\t\t<div className='login-btn'>\n\t\t\t\t<GoogleButton type='light' onClick={() => props.LogIn()} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\treturn {\n\t\tcalendar: state,\n\t\tcurrent: state.current.modalOpen,\n\t\tloggedIn: state.firebase.auth.uid,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {\n\t\tLogIn: () => dispatch(LogIn()),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInPage);\n","import React from 'react';\nimport '../syles/Modal.css';\nimport '../syles/Moods.css';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { resetCurrent } from '../redux/actions/currentActions';\nimport { syncFirebase } from '../redux/actions/firebaseActions';\nimport {\n\taddMood,\n\taddMessage,\n\tdeleteDay,\n} from '../redux/actions/calendarActions';\nimport { AppStateDetails } from './_reducer_types';\nimport { MonthDetails, YearDetails } from './_calendar_types';\n\ninterface ModalProps {\n\tcal: YearDetails;\n\tcurrentDay: number;\n\tcurrentMonth: MonthDetails;\n\taddMessage: (message: string | null) => void;\n\taddMood: (mood: number) => void;\n\tdeleteDay: () => void;\n\tresetCurrent: () => void;\n\tsyncFirebase: () => void;\n}\n\nconst Modal = (props: ModalProps) => {\n\tlet storedMood: number = 0;\n\tlet storedMessage: string = '';\n\n\tconst circleClicked = (moodNum: number) => {\n\t\tprops.addMood(moodNum);\n\t\tprops.syncFirebase();\n\t};\n\tconst messageClicked = () => {\n\t\tconst response = prompt(\n\t\t\t`what was going on in ${props.currentMonth}/${props.currentDay}`\n\t\t);\n\t\tprops.addMessage(response);\n\t\tprops.syncFirebase();\n\t};\n\n\t// get message and mood\n\tconst monthOBj = props.cal[`month${props.currentMonth.num}`];\n\tif (monthOBj) {\n\t\tif (monthOBj.days[`day${props.currentDay}`]) {\n\t\t\tstoredMood = monthOBj.days[`day${props.currentDay}`].mood\n\t\t\t\t? monthOBj.days[`day${props.currentDay}`].mood\n\t\t\t\t: 0;\n\n\t\t\tstoredMessage = monthOBj.days[`day${props.currentDay}`].message\n\t\t\t\t? monthOBj.days[`day${props.currentDay}`].message\n\t\t\t\t: '';\n\t\t}\n\t}\n\n\tlet storedMoodMessage: string;\n\tif (storedMood) {\n\t\tstoredMoodMessage =\n\t\t\t`You were feeling ` +\n\t\t\tmakeMoodMessage(storedMood) +\n\t\t\t` on ${props.currentMonth.name} ${props.currentDay}`;\n\t} else {\n\t\tstoredMoodMessage = \"You don't have a mood for this day\";\n\t}\n\n\treturn (\n\t\t<div className='modal-container'>\n\t\t\t<div className={`modal mood${storedMood}`}>\n\t\t\t\t<button className='modal-btn' onClick={() => props.resetCurrent()}>\n\t\t\t\t\tX\n\t\t\t\t</button>\n\n\t\t\t\t<div className='modal-content'>\n\t\t\t\t\t<p className='date'> {storedMoodMessage} </p>\n\t\t\t\t\t<button className='message' onClick={() => messageClicked()}>\n\t\t\t\t\t\t{storedMessage !== ''\n\t\t\t\t\t\t\t? storedMessage\n\t\t\t\t\t\t\t: \"What's happening on this day\"}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='mood-circles'>\n\t\t\t\t\t<button className='mood1' onClick={() => circleClicked(1)}>\n\t\t\t\t\t\tBad\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className='mood2' onClick={() => circleClicked(2)}>\n\t\t\t\t\t\tOkay\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className='mood3' onClick={() => circleClicked(3)}>\n\t\t\t\t\t\tGood\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className='mood4' onClick={() => circleClicked(4)}>\n\t\t\t\t\t\tExcellent\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName='clear-btn'\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.deleteDay();\n\t\t\t\t\t\tprops.syncFirebase();\n\t\t\t\t\t}}>\n\t\t\t\t\tclear day\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst makeMoodMessage = (moodNum: number): string => {\n\tlet moodMessage: string;\n\tif (moodNum === 1) {\n\t\tmoodMessage = 'bad';\n\t} else if (moodNum === 2) {\n\t\tmoodMessage = 'okay';\n\t} else if (moodNum === 3) {\n\t\tmoodMessage = 'good';\n\t} else if (moodNum === 4) {\n\t\tmoodMessage = 'excellent';\n\t} else {\n\t\tmoodMessage = \"You don't have a mood for this day\";\n\t}\n\treturn moodMessage;\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\tconst month = state.current.month;\n\treturn {\n\t\tcal: state.calendar.year2020,\n\t\tcurrentMonth: state.calendar.year2020[`month${month}`],\n\t\tcurrentDay: state.current.day,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {\n\t\tresetCurrent: () => dispatch(resetCurrent()),\n\t\taddMood: (moodNum: number) => dispatch(addMood(moodNum)),\n\t\taddMessage: (message: string | null) => dispatch(addMessage(message)),\n\t\tdeleteDay: () => dispatch(deleteDay()),\n\t\tsyncFirebase: () => dispatch(syncFirebase()),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React from 'react';\nimport Calendar from './components/Calendar';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport LogInPage from './components/LogInPage';\nimport Modal from './components/Modal';\nimport { AppStateDetails } from './components/_reducer_types';\n\ninterface AppProps {\n\tcalendar: AppStateDetails;\n\tcurrent: boolean;\n\tloggedIn: string;\n}\n\nconst App = (props: AppProps) => {\n\treturn (\n\t\t<div className='container'>\n\t\t\t{props.current ? <Modal /> : ''}\n\t\t\t{props.loggedIn ? <Calendar /> : <LogInPage />}\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: AppStateDetails) => {\n\treturn {\n\t\tcalendar: state,\n\t\tcurrent: state.current.modalOpen,\n\t\tloggedIn: state.firebase.auth.uid,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n\treturn {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { mergeDeep } from 'immutable';\nimport { CalendarReducerDetails } from '../../components/_reducer_types';\nimport _ from 'lodash';\n\nconst initialState = {\n\tyear2020: {\n\t\t// month0: { num: 0, name: 'January', length: 31, starts: 3, days: {} },\n\t\t// month1: {\n\t\t// \tnum: 1,\n\t\t// \tname: 'February',\n\t\t// \tlength: 28,\n\t\t// \tstarts: 6,\n\t\t// \tdays: {\n\t\t// \t\tday11: { mood: 1 },\n\t\t// \t\tday12: { mood: 2 },\n\t\t// \t\tday13: { mood: 3 },\n\t\t// \t\tday14: { mood: 4 },\n\t\t// \t},\n\t\t// },\n\t},\n};\n\nconst calendarReducer = (\n\tstate = initialState,\n\taction: CalendarReducerDetails\n) => {\n\tswitch (action.type) {\n\t\tcase 'CREATE_MONTH':\n\t\t\treturn mergeDeep(state, {\n\t\t\t\tyear2020: { [action.monthName]: action.month },\n\t\t\t});\n\n\t\tcase 'CREATE_DAY':\n\t\t\treturn mergeDeep(state, {\n\t\t\t\tyear2020: { [action.monthName]: { days: action.day } },\n\t\t\t});\n\n\t\tcase 'CREATE_MOOD':\n\t\t\treturn mergeDeep(state, {\n\t\t\t\tyear2020: {\n\t\t\t\t\t[action.monthName]: {\n\t\t\t\t\t\tdays: { [action.dayName]: { mood: action.mood } },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\tcase 'CREATE_MESSAGE':\n\t\t\treturn mergeDeep(state, {\n\t\t\t\tyear2020: {\n\t\t\t\t\t[action.monthName]: {\n\t\t\t\t\t\tdays: { [action.dayName]: { message: action.message } },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\tcase 'DELETE_DAY':\n\t\t\tconst newState = _.cloneDeep(state);\n\t\t\t_.unset(newState, `year2020.${action.monthName}.days.${action.dayName}`);\n\t\t\treturn newState;\n\n\t\tcase 'SYNC_WITH_FIREBASE':\n\t\t\treturn mergeDeep(state, action.calendar);\n\n\t\tcase 'LOG_OUT':\n\t\t\treturn { year2020: {} };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default calendarReducer;\n","import { setIn, merge } from 'immutable';\nimport { CurrentReducerDetails } from '../../components/_reducer_types';\n\nconst initialState = {\n\tmodalOpen: false,\n\tyear: 2020,\n\tmonth: 0,\n\tday: null,\n\ttimesFirestoreLoaded: 0,\n};\n\nconst currentReducer = (\n\tstate = initialState,\n\taction: CurrentReducerDetails\n) => {\n\tswitch (action.type) {\n\t\tcase 'FIREBASE_LOADED':\n\t\t\treturn { ...state, timesFirestoreLoaded: state.timesFirestoreLoaded + 1 };\n\n\t\tcase 'UPDATE_MODAL':\n\t\t\treturn setIn(state, ['modalOpen'], !state.modalOpen);\n\n\t\tcase 'UPDATE_CURRENT_MONTH':\n\t\t\treturn setIn(state, ['month'], action.month);\n\n\t\tcase 'UPDATE_CURRENT_DAY':\n\t\t\treturn setIn(state, ['day'], action.day);\n\n\t\tcase 'RESET_CURRENT':\n\t\t\treturn merge(state, { modalOpen: false, day: null });\n\n\t\tcase 'RESET_APP':\n\t\t\treturn merge(state, {\n\t\t\t\tmodalOpen: false,\n\t\t\t\tmonth: 0,\n\t\t\t\tday: null,\n\t\t\t\ttimesFirestoreLoaded: 0,\n\t\t\t});\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default currentReducer;\n","import { combineReducers } from 'redux';\n\nimport { firestoreReducer } from 'redux-firestore';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nimport calendarReducer from './calendarReducer';\nimport currentReducer from './currentReducer';\n\nexport default combineReducers({\n  calendar: calendarReducer,\n  current: currentReducer,\n  firestore: firestoreReducer,\n  firebase: firebaseReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers/';\n\nimport {getFirebase} from 'react-redux-firebase';\nimport {getFirestore, reduxFirestore} from 'redux-firestore';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nexport const firebaseConfig = {\n  apiKey:            \"AIzaSyAL5D8qMwLeApe00CIkXjT8RTKetz1l8uM\",\n  authDomain:        \"mood-calendar-91494.firebaseapp.com\",\n  databaseURL:       \"https://mood-calendar-91494.firebaseio.com\",\n  projectId:         \"mood-calendar-91494\",\n  storageBucket:     \"mood-calendar-91494.appspot.com\",\n  messagingSenderId: \"1040700958396\",\n  appId:             \"1:1040700958396:web:4f2829334b1152a736d2b9\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nfirebase.firestore();\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers(\n    applyMiddleware(thunk.withExtraArgument({getFirestore, getFirebase})),\n    reduxFirestore(firebase)\n  )\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport {store, firebaseConfig} from './redux';\n\nimport firebase from 'firebase/app';\nimport {createFirestoreInstance} from 'redux-firestore';\nimport {ReactReduxFirebaseProvider} from 'react-redux-firebase';\n\n\n// REACT REDUX FIREBASE OPTIONS\nconst rrfProps = {\n  firebase,\n  config: firebaseConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </ReactReduxFirebaseProvider>\n  </Provider>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}